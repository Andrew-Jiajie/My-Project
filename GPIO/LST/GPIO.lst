C51 COMPILER V9.53.0.0   GPIO                                                              02/27/2018 14:07:52 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE GPIO
OBJECT MODULE PLACED IN .\Output\GPIO.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Code\GPIO.C LARGE OPTIMIZE(4,SPEED) BROWSE INCDIR(..\..\Include) DEFINE(
                    -FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\GPIO.lst) TABS(2) OBJECT(.\Output\GPIO.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2017 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          
   7          //********************************************************************************************************
             -***
   8          //  Website: http://www.nuvoton.com
   9          //  E-Mail : MicroC-8bit@nuvoton.com
  10          //  Date   : Jan/21/2017
  11          //********************************************************************************************************
             -***
  12          
  13          //********************************************************************************************************
             -***
  14          //  File Function: N76E003 GPIO demo code
  15          //********************************************************************************************************
             -***
  16          #include "N76E003.h"
  17          #include "SFR_Macro.h"
  18          #include "Function_define.h"
  19          #include "Common.h"
  20          #include "Delay.h"
  21          #include "Music_control.h"
  22          
  23          #define USE_LED 0
  24          
  25          #if USE_LED
              #include "FFT.h"
              #endif
  28          
  29          #define HIGH 1
  30          #define LOW 0
  31          
  32          #define WAITING 2
  33          #define PLAYING 1
  34          #define STOP 0
  35          #define ON 1
  36          #define OFF 0
  37          #define MINIT   60
  38          #define SECOND 1
  39          #define SW_PRESS 1
  40          #define SW_RELEASE 2
  41          #define SW_NONE 0
  42          
  43          #define SYS_VOLUME 35
  44          #define AUDIO_CTRL P01
  45          #define DEBUG_LED P11
C51 COMPILER V9.53.0.0   GPIO                                                              02/27/2018 14:07:52 PAGE 2   

  46          
  47          /*------------------------------------------------
  48          The main C function.  Program execution starts
  49          here after stack initialization.
  50          ------------------------------------------------*/
  51          
  52          #define setbit(x,y) x|=(1<<y) //将X的第Y位置1
  53          #define testbit(x,y) x&(1<<y) //测试X的第Y位置
  54          #define clrbit(x,y) x&=!(1<<y) //将X的第Y位清0
  55          
  56          uchar button_trig_state=HIGH;
  57          uchar play_trig_state=HIGH;
  58          uchar charge_trig_state=HIGH;
  59          
  60          uchar Play_state=STOP;
  61          uchar Charge_state=OFF;
  62          uchar Button_state=SW_NONE;
  63          uchar Reset_system=0;
  64          uchar Reset_audio=0;
  65          uchar Power_state=OFF;
  66          uchar Charge_type=TYPE_NONE;
  67          uchar Body_Music_Play=STOP;
  68          uchar Body_play_fail=0;
  69          uchar Head_play_fail=0;
  70          unsigned int timer_count=0;
  71          unsigned int wake_time=0;
  72          
  73          
  74          void PinInterrupt_ISR (void) interrupt 7
  75          {
  76   1        if (testbit(PIF,7)) //SWITCH PIN
  77   1        {
  78   2          clrbit(PIF,7);
  79   2          clr_EPI;              //disable interrupt
  80   2          Delay_1ms(1);
  81   2          if(button_trig_state==LOW && P17==LOW){
  82   3            Enable_BIT7_RasingEdge_Trig;
  83   3            button_trig_state=HIGH;
  84   3            Button_state=SW_PRESS;
  85   3            DEBUG_LED=1;
  86   3            clr_PD;
  87   3          }else if(button_trig_state==HIGH && P17==HIGH){
  88   3            Enable_BIT7_FallEdge_Trig;
  89   3            button_trig_state=LOW;
  90   3            Button_state=SW_RELEASE;
  91   3            DEBUG_LED=0;
  92   3            clr_PD;
  93   3          }
  94   2          set_EPI;              //enable intterrupt
  95   2        }
  96   1        if (testbit(PIF,2)) //BUSY PIN
  97   1        {
  98   2          clrbit(PIF,2);
  99   2          if(Power_state==OFF)
 100   2            return;
 101   2          clr_EPI;              //disable interrupt
 102   2          Delay_1ms(3); 
 103   2          if(play_trig_state==LOW && P12==LOW){
 104   3            Enable_BIT2_RasingEdge_Trig;
 105   3            play_trig_state=HIGH;
 106   3            Play_state=PLAYING;
 107   3          }else if(play_trig_state==HIGH && P12==HIGH){
C51 COMPILER V9.53.0.0   GPIO                                                              02/27/2018 14:07:52 PAGE 3   

 108   3            Enable_BIT2_FallEdge_Trig;
 109   3            play_trig_state=LOW;
 110   3            Play_state=STOP;
 111   3          }
 112   2          set_EPI;              //enable intterrupt
 113   2          //clr_PD;
 114   2        }
 115   1        if (testbit(PIF,3)) //USB PIN
 116   1        {
 117   2          clrbit(PIF,3);
 118   2          clr_EPI;              //disable interrupt
 119   2          Delay_1ms(2);
 120   2          if(charge_trig_state==LOW && P13==LOW){
 121   3            Enable_BIT3_RasingEdge_Trig;
 122   3            charge_trig_state=HIGH;
 123   3            Charge_state=OFF;
 124   3            Reset_audio=0;
 125   3            Reset_system=1;
 126   3            clr_PD;
 127   3          }else if(charge_trig_state==HIGH && P13==HIGH){
 128   3            Enable_BIT3_FallEdge_Trig;
 129   3            charge_trig_state=LOW;
 130   3            Charge_state=ON;
 131   3            Reset_system=0;
 132   3            Reset_audio=1;
 133   3            clr_PD;
 134   3          }
 135   2          set_EPI;              //enable intterrupt
 136   2        }
 137   1      }
 138          
 139          /*********************************************************************************************************
             -***
 140          *    TIMER 0 interrupt subroutine
 141          **********************************************************************************************************
             -**/
 142          void Timer0_ISR (void) interrupt 1          //interrupt address is 0x000B
 143          {
 144   1        clr_TF0;
 145   1        clr_TR0;                                    //Stop Timer0
 146   1          TL0 = LOBYTE(TIMER_DIV12_VALUE_40ms);     //Find  define in "Function_define.h" "TIMER VALUE"
 147   1          TH0 = HIBYTE(TIMER_DIV12_VALUE_40ms);
 148   1        set_TR0;                                    //Start Timer0
 149   1        timer_count+=40;
 150   1        if(timer_count >= 1000){
 151   2          timer_count=0;
 152   2          wake_time++;
 153   2        }
 154   1      }
 155          void audio_power_on()
 156          {
 157   1        AUDIO_CTRL = LOW;
 158   1        Charge_type = Get_charge_type(16); //25*16=400ms for timeout
 159   1        Power_state = ON;
 160   1        Send_Data_To_UART0(0xcc);
 161   1        Send_Data_To_UART0(Charge_type);
 162   1      }
 163          void audio_power_off(uchar sleep_flag)
 164          {
 165   1        uchar org_p06=P06;
 166   1        uchar org_p07=P07;
 167   1        uchar org_p03=P03;
C51 COMPILER V9.53.0.0   GPIO                                                              02/27/2018 14:07:52 PAGE 4   

 168   1        uchar org_p04=P04;
 169   1        uchar org_p12=P12;
 170   1      clr_EPI;
 171   1        clr_TR0;                                    //Stop Timer0
 172   1        wake_time=0;
 173   1        Power_state=OFF;                //Must set to OFF before power down, or will trigger.
 174   1        AUDIO_CTRL=HIGH;
 175   1        org_p03=P03;
 176   1        org_p04=P04;
 177   1        org_p06=P06;
 178   1        org_p07=P07;
 179   1        org_p12=P12;
 180   1        P03_Quasi_Mode;
 181   1        P04_Quasi_Mode;
 182   1        P12_Quasi_Mode;
 183   1        P03=0;
 184   1        P04=0;
 185   1        P06=0;
 186   1        P07=0;
 187   1        P12=0;
 188   1      set_EPI;
 189   1        if(sleep_flag==1){
 190   2          set_PD;                   //go to sleep mode
 191   2        }
 192   1      clr_EPI;
 193   1        P12=org_p12;
 194   1        P12_Input_Mode;
 195   1        P03=org_p03;
 196   1        P04=org_p04;
 197   1        P06=org_p06;
 198   1        P07=org_p07;
 199   1        P12=org_p12;
 200   1        set_TR0;                                    //Timer0 run
 201   1      set_EPI;
 202   1      }
 203          void reboot_audio()
 204          {
 205   1        audio_power_off(0);
 206   1        Delay_1ms(10);
 207   1        audio_power_on();
 208   1      }
 209          // led num range is 0~1024
 210          void LED_R(int num){
 211   1        PWM1H = HIBYTE(num);        
 212   1        PWM1L = LOBYTE(num);
 213   1        PWM1_OUTPUT_INVERSE;
 214   1        set_LOAD;
 215   1      }
 216          void LED_G(int num){
 217   1        PWM3H = HIBYTE(num);        
 218   1        PWM3L = LOBYTE(num);
 219   1        PWM3_OUTPUT_INVERSE;
 220   1        set_LOAD;
 221   1      }
 222          void LED_B(int num){
 223   1        PWM2H = HIBYTE(num);        
 224   1        PWM2L = LOBYTE(num);
 225   1        PWM2_OUTPUT_INVERSE;
 226   1        set_LOAD;
 227   1      }
 228          void init_LED(){
 229   1        PWM1_P14_OUTPUT_ENABLE;
C51 COMPILER V9.53.0.0   GPIO                                                              02/27/2018 14:07:52 PAGE 5   

 230   1        PWM3_P00_OUTPUT_ENABLE;
 231   1        PWM2_P05_OUTPUT_ENABLE;
 232   1      
 233   1        PWM_IMDEPENDENT_MODE;
 234   1        PWM_CLOCK_DIV_8;
 235   1        PWMPH = 0x07;
 236   1        PWMPL = 0xCF;
 237   1        
 238   1        LED_R(0);
 239   1        LED_G(0);
 240   1        LED_B(0);
 241   1        set_PWMRUN;
 242   1      }
 243          //-----------------------------------------------------------------------------------
 244          
 245          #if USE_LED
              int get_adc(void)
              {
                clr_ADCF;
                set_ADCS;                 // ADC start trig signal
                while(ADCF == 0);
                  return (int)(ADCRH<<2) + (int)((ADCRL&0x0f)>>2);//(((int)ADCRH)<<4+ADCRL&0x0f);
              }
               void ADC_Finish()
              {
                  uchar ADC_Count=0;
                Enable_ADC_AIN5;
                  while(ADC_Count<=64)
                  {
                    Fft_Real[LIST_TAB[ADC_Count]]=get_adc()-256; //按LIST_TAB表里的顺序，进行存储 采样值,,
                    //  ADC_CONTR = ADC_POWER | ADC_SPEEDHH| ADC_START | channel;   // 为了采集负电压，采用 偏置采集。电
             -压提高到1/2 vcc，，所以要减去256
                    ADC_Count++;
                  }
              }
              #endif
 265          
 266          
 267          void main (void) 
 268          {
 269   1        //set_PD;                 //powerdown directly 131.5uA
 270   1        Set_All_GPIO_Quasi_Mode;          // Define in Function_define.h
 271   1        DEBUG_LED=0;
 272   1        P01_PushPull_Mode;
 273   1        AUDIO_CTRL=1;
 274   1        Delay_1ms(300);               //Delay 300ms in case download problem
 275   1        InitialUART0_Timer1(9600);
 276   1        Send_Data_To_UART0(0xaa);
 277   1        Send_Data_To_UART0(0xaa);
 278   1        set_CLOEN; 
 279   1        audio_power_on();
 280   1      
 281   1      /*-------------------------------Init Timer---------------------------------------------*/
 282   1      #if 1
 283   1        TIMER0_MODE0_ENABLE;                        //Timer 0 and Timer 1 mode configuration
 284   1        clr_T0M;
 285   1          TMOD |= 0x01;                               //Timer0 is 16-bit mode
 286   1          TL0 = LOBYTE(TIMER_DIV12_VALUE_40ms);     //Find  define in "Function_define.h" "TIMER VALUE"
 287   1          TH0 = HIBYTE(TIMER_DIV12_VALUE_40ms);
 288   1        set_ET0;                                    //enable Timer0 interrupt
 289   1        set_EA;                                     //enable interrupts
 290   1        set_TR0;                                    //Timer0 run
C51 COMPILER V9.53.0.0   GPIO                                                              02/27/2018 14:07:52 PAGE 6   

 291   1      #endif
 292   1      
 293   1      /*-------------------------------Init Interrupts---------------------------------------------*/
 294   1      #if 1
 295   1        //Switch detect
 296   1        P17_Input_Mode;
 297   1        set_P0S_7;
 298   1        Enable_BIT7_FallEdge_Trig;
 299   1        button_trig_state=LOW;
 300   1        
 301   1        //USB detect
 302   1        P13_Input_Mode;
 303   1        set_P0S_3;
 304   1        Enable_BIT3_RasingEdge_Trig;
 305   1        charge_trig_state=HIGH;
 306   1        
 307   1        //audio BUSY pin
 308   1        P12_Input_Mode;
 309   1        set_P0S_2;
 310   1        Enable_BIT2_FallEdge_Trig;
 311   1        play_trig_state=LOW;
 312   1      
 313   1        Enable_INT_Port1;
 314   1        set_EPI;              // Enable pin interrupt
 315   1        //set_EA;               // global enable bit
 316   1      
 317   1      #endif
 318   1      /*---------------------------------Main function-----------------------------------------------*/
 319   1        init_LED();
 320   1        Specify_Volume(SYS_VOLUME);
 321   1        while(1){
 322   2          //set_PD;         //powerdown here can be 145.8uA
 323   2          if(Button_state==SW_PRESS && Charge_state==OFF){
 324   3            Button_state=SW_NONE;
 325   3            Body_Music_Play=STOP;     //only head can set Body_Music_Play to stop. this can make sure the play order
 326   3            if(Power_state==OFF){
 327   4              audio_power_on();
 328   4              Specify_Volume(SYS_VOLUME);
 329   4            }
 330   3            Play_head_music();
 331   3            Delay_1ms(5);
 332   3            if(Play_state==PLAYING){
 333   4              Head_play_fail=0;
 334   4              Body_play_fail=0;
 335   4            }else{
 336   4              Head_play_fail++;
 337   4            }
 338   3          }
 339   2          if(Button_state==SW_RELEASE && Charge_state==OFF && Body_Music_Play==STOP){
 340   3            Button_state=SW_NONE;
 341   3            Body_Music_Play=WAITING;
 342   3          }
 343   2          if(Play_state==STOP && Body_Music_Play==WAITING){
 344   3            if(Power_state==ON){
 345   4              Play_body_music();
 346   4              Delay_1ms(5);
 347   4              if(Play_state==PLAYING){
 348   5                Body_Music_Play=PLAYING;
 349   5                Body_play_fail=0;
 350   5                Head_play_fail=0;
 351   5              }else{
 352   5                Body_play_fail++;
C51 COMPILER V9.53.0.0   GPIO                                                              02/27/2018 14:07:52 PAGE 7   

 353   5              }
 354   4            }
 355   3          }
 356   2          if(Body_play_fail>=2 && Head_play_fail>=2){ //if switch key state problem, will reboot system to get thi
             -ngs ready
 357   3            Reset_system=1;
 358   3          }
 359   2          if(Play_state==PLAYING){
 360   3      #if USE_LED
                    int red=0, green=0, blue=0;
                    set_PWMRUN;
                    ADC_Finish();
                    FFT();
              #if 0
                      for(i=0; i<16; i++){
                        Send_Data_To_UART0(LED_TAB[i]);
                      }
                    Send_Data_To_UART0('\n');
              #endif
                    red=LED_TAB[1]+LED_TAB[2]+LED_TAB[3]+LED_TAB[4]+LED_TAB[5];
                    green=LED_TAB[6]+LED_TAB[7]+LED_TAB[8]+LED_TAB[9]+LED_TAB[10];
                    blue=LED_TAB[11]+LED_TAB[12]+LED_TAB[13]+LED_TAB[14]+LED_TAB[15];
                    red=red*2;
                    green=green*2;
                    green=green*2;
                    LED_R(red);
                    LED_G(green);
                    LED_B(blue);
              #else
 381   3            set_IDL;        //save power, if LED do not turn on
 382   3      #endif
 383   3              wake_time = 0;
 384   3          }
 385   2          if(Play_state==STOP){
 386   3            LED_R(0);
 387   3            LED_G(0);
 388   3            LED_B(0);
 389   3            set_IDL;
 390   3          }
 391   2      
 392   2          DEBUG_LED=1;      //let LED shining to detect if system active.
 393   2          Delay_1ms(10);
 394   2          DEBUG_LED=0;
 395   2          Delay_1ms(20);
 396   2          
 397   2          if(Reset_system==1){
 398   3            Delay_1ms(300);       //Add delay 300ms, in case USB connection problem.
 399   3            if(Reset_system==1){
 400   4              Reset_system=0;
 401   4              SW_Reset();
*** WARNING C206 IN LINE 401 OF Code\GPIO.C: 'SW_Reset': missing function-prototype
 402   4            }
 403   3          }
 404   2          if(Reset_audio==1){
 405   3            Delay_1ms(100);       //Add delay 300ms, in case USB connection problem.
 406   3            if(Reset_audio==1){
 407   4              Reset_audio=0;
 408   4              reboot_audio();     //reboot audio, to get the charger type.
 409   4            }
 410   3          }
 411   2          if(Play_state==PLAYING && Charge_state==ON){
 412   3            Stop_music();
C51 COMPILER V9.53.0.0   GPIO                                                              02/27/2018 14:07:52 PAGE 8   

 413   3          }
 414   2          if(Play_state==STOP && Charge_state==OFF && wake_time > SECOND*8)
 415   2          {
 416   3            //Send_Data_To_UART0(0xaa);
 417   3            audio_power_off(1);
 418   3          }
 419   2          if(Charge_state==ON && Charge_type==TYPE_USB && wake_time > MINIT*20) //when USB state, power off audio 
             -after 20min, to make sure device can charge to full.
 420   2          {
 421   3            //Send_Data_To_UART0(0xbb);
 422   3            audio_power_off(1);
 423   3          }
 424   2          if(Charge_state==ON && Charge_type!=TYPE_USB && wake_time > MINIT*20) //when AC state, power off audio a
             -fter 1min,power off audio, to make sure device can charge to full.
 425   2          {
 426   3            //Send_Data_To_UART0(0xcc);
 427   3            audio_power_off(1);
 428   3          }
 429   2      
 430   2        }
 431   1      }
*** WARNING C290 IN LINE 159 OF Code\GPIO.C: missing return value
*** WARNING C290 IN LINE 171 OF Code\GPIO.C: missing return value
*** WARNING C290 IN LINE 220 OF Code\GPIO.C: missing return value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2607    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     49      46
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  4 WARNING(S),  0 ERROR(S)
