C51 COMPILER V9.53.0.0   GPIO                                                              02/08/2018 14:56:39 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE GPIO
OBJECT MODULE PLACED IN .\Output\GPIO.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Code\GPIO.C LARGE OPTIMIZE(4,SPEED) BROWSE INCDIR(..\..\Include) DEFINE(
                    -FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\GPIO.lst) TABS(2) OBJECT(.\Output\GPIO.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2017 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          
   7          //********************************************************************************************************
             -***
   8          //  Website: http://www.nuvoton.com
   9          //  E-Mail : MicroC-8bit@nuvoton.com
  10          //  Date   : Jan/21/2017
  11          //********************************************************************************************************
             -***
  12          
  13          //********************************************************************************************************
             -***
  14          //  File Function: N76E003 GPIO demo code
  15          //********************************************************************************************************
             -***
  16          #include "N76E003.h"
  17          #include "SFR_Macro.h"
  18          #include "Function_define.h"
  19          #include "Common.h"
  20          #include "Delay.h"
  21          #include "Music_control.h"
  22          #include "FFT.h"
  23          
  24          #define DEBUG 0
  25          #define HIGH 1
  26          #define LOW 0
  27          
  28          #define PLAYING 1
  29          #define STOP 0
  30          #define ON 1
  31          #define OFF 0
  32          #define SOURCE_TF 2
  33          #define SOURCE_FLASH 3
  34          #define MINIT   60
  35          #define SECOND 1
  36          
  37          #define SYS_VOLUME 35
  38          #define AUDIO_CTRL P01
  39          #define DEBUG_LED P11
  40          
  41          /*------------------------------------------------
  42          The main C function.  Program execution starts
  43          here after stack initialization.
  44          ------------------------------------------------*/
  45          
C51 COMPILER V9.53.0.0   GPIO                                                              02/08/2018 14:56:39 PAGE 2   

  46          #define setbit(x,y) x|=(1<<y) //将X的第Y位置1
  47          #define testbit(x,y) x&(1<<y) //测试X的第Y位置
  48          #define clrbit(x,y) x&=!(1<<y) //将X的第Y位清0
  49          
  50          int button_trig_state=HIGH;
  51          int play_trig_state=HIGH;
  52          int charge_trig_state=HIGH;
  53          
  54          int Button_state=-1;
  55          int Play_state=STOP;
  56          int Charge_state=OFF;
  57          int Reset_system=-1;
  58          int Reset_audio=-1;
  59          int Power_state=ON;
  60          int charge_type=TYPE_NONE;
  61          void PinInterrupt_ISR (void) interrupt 7
  62          {
  63   1        if (testbit(PIF,7)) //SWITCH PIN
  64   1        {
  65   2          clrbit(PIF,7);
  66   2          Delay_1ms(5);
  67   2          if(button_trig_state==LOW && P17==LOW){
  68   3            Enable_BIT7_RasingEdge_Trig;
  69   3            button_trig_state=HIGH;
  70   3            Button_state=1;
  71   3            clr_PD;
  72   3          }else if(button_trig_state==HIGH && P17==HIGH){
  73   3            Enable_BIT7_FallEdge_Trig;
  74   3            button_trig_state=LOW;
  75   3            Button_state=0;
  76   3            clr_PD;
  77   3          }
  78   2        }
  79   1        if (testbit(PIF,2)) //BUSY PIN
  80   1        {
  81   2          clrbit(PIF,2);
  82   2          if(Power_state==OFF)
  83   2            return;
  84   2          Delay_1ms(3); 
  85   2          if(play_trig_state==LOW && P12==LOW){
  86   3            Enable_BIT2_RasingEdge_Trig;
  87   3            play_trig_state=HIGH;
  88   3            Play_state=PLAYING;
  89   3            DEBUG_LED=1;
  90   3          }else if(play_trig_state==HIGH && P12==HIGH){
  91   3            Enable_BIT2_FallEdge_Trig;
  92   3            play_trig_state=LOW;
  93   3            Play_state=STOP;
  94   3            DEBUG_LED=0;
  95   3          }
  96   2          //clr_PD;
  97   2        }
  98   1        if (testbit(PIF,3)) //USB PIN
  99   1        {
 100   2          clrbit(PIF,3);
 101   2          Delay_1ms(2);
 102   2          if(charge_trig_state==LOW && P13==LOW){
 103   3            Enable_BIT3_RasingEdge_Trig;
 104   3            charge_trig_state=HIGH;
 105   3            Charge_state=OFF;
 106   3            Reset_audio=-1;
 107   3            Reset_system=1;
C51 COMPILER V9.53.0.0   GPIO                                                              02/08/2018 14:56:39 PAGE 3   

 108   3            clr_PD;
 109   3          }else if(charge_trig_state==HIGH && P13==HIGH){
 110   3            Enable_BIT3_FallEdge_Trig;
 111   3            charge_trig_state=LOW;
 112   3            Charge_state=ON;
 113   3            Reset_system=-1;
 114   3            Reset_audio=1;
 115   3            clr_PD;
 116   3          }
 117   2        }
 118   1      }
 119          
 120          unsigned long wake_time=0;
 121          unsigned long timer_count=0;
 122          
 123          /*********************************************************************************************************
             -***
 124          *    TIMER 0 interrupt subroutine
 125          **********************************************************************************************************
             -**/
 126          void Timer0_ISR (void) interrupt 1          //interrupt address is 0x000B
 127          {
 128   1        clr_TF0;
 129   1        clr_TR0;                                    //Stop Timer0
 130   1          TL0 = LOBYTE(TIMER_DIV12_VALUE_40ms);     //Find  define in "Function_define.h" "TIMER VALUE"
 131   1          TH0 = HIBYTE(TIMER_DIV12_VALUE_40ms);
 132   1        set_TR0;                                    //Start Timer0
 133   1        timer_count+=40;
 134   1        if(timer_count >= 1000){
 135   2          timer_count=0;
 136   2          wake_time++;
 137   2        }
 138   1      }
 139          void audio_power_on()
 140          {
 141   1        AUDIO_CTRL = LOW;
 142   1        charge_type = Get_charge_type(16); //25*16=400ms for timeout
 143   1        Power_state = ON;
 144   1        Send_Data_To_UART0(0xcc);
 145   1        Send_Data_To_UART0(charge_type);
 146   1      }
 147          void audio_power_off(int sleep_flag)
 148          {
 149   1        int org_p06=P06;
 150   1        int org_p07=P07;
 151   1        int org_p03=P03;
 152   1        int org_p04=P04;
 153   1        int org_p12=P12;
 154   1        clr_TR0;                                    //Stop Timer0
 155   1        wake_time=0;
 156   1        Power_state=OFF;                //Must set to OFF before power down, or will trigger.
 157   1        AUDIO_CTRL=HIGH;
 158   1        org_p03=P03;
 159   1        org_p04=P04;
 160   1        org_p06=P06;
 161   1        org_p07=P07;
 162   1        org_p12=P12;
 163   1        P03_Quasi_Mode;
 164   1        P04_Quasi_Mode;
 165   1        P12_Quasi_Mode;
 166   1        P03=0;
 167   1        P04=0;
C51 COMPILER V9.53.0.0   GPIO                                                              02/08/2018 14:56:39 PAGE 4   

 168   1        P06=0;
 169   1        P07=0;
 170   1        P12=0;
 171   1        if(sleep_flag==1){
 172   2          set_PD;                   //go to sleep mode
 173   2        }
 174   1        P12=org_p12;
 175   1        P12_Input_Mode;
 176   1        P03=org_p03;
 177   1        P04=org_p04;
 178   1        P06=org_p06;
 179   1        P07=org_p07;
 180   1        P12=org_p12;
 181   1        set_TR0;                                    //Timer0 run
 182   1      }
 183          void reboot_audio()
 184          {
 185   1        audio_power_off(0);
 186   1        Delay_1ms(10);
 187   1        audio_power_on();
 188   1      }
 189           void ADC_Finish()
 190          {
 191   1          int ADC_Count=0;
 192   1        Enable_ADC_AIN5;
 193   1          while(ADC_Count<=64)
 194   1          {
 195   2            Fft_Real[LIST_TAB[ADC_Count]]=get_adc()-256; //按LIST_TAB表里的顺序，进行存储 采样值,,
*** WARNING C206 IN LINE 195 OF Code\GPIO.C: 'get_adc': missing function-prototype
 196   2            //  ADC_CONTR = ADC_POWER | ADC_SPEEDHH| ADC_START | channel;   // 为了采集负电压，采用 偏置采集。电
             -压提高到1/2 vcc，，所以要减去256
 197   2            ADC_Count++;
 198   2          }
 199   1      }
 200          
 201          // led num range is 0~1024
 202          void LED_R(int num){
 203   1        PWM1H = HIBYTE(num);        
 204   1        PWM1L = LOBYTE(num);
 205   1        PWM1_OUTPUT_INVERSE;
 206   1        set_LOAD;
 207   1      }
 208          void LED_G(int num){
 209   1        PWM3H = HIBYTE(num);        
 210   1        PWM3L = LOBYTE(num);
 211   1        PWM3_OUTPUT_INVERSE;
 212   1        set_LOAD;
 213   1      }
 214          void LED_B(int num){
 215   1        PWM2H = HIBYTE(num);        
 216   1        PWM2L = LOBYTE(num);
 217   1        PWM2_OUTPUT_INVERSE;
 218   1        set_LOAD;
 219   1      }
 220          void init_LED(){
 221   1        PWM1_P14_OUTPUT_ENABLE;
 222   1        PWM3_P00_OUTPUT_ENABLE;
 223   1        PWM2_P05_OUTPUT_ENABLE;
 224   1      
 225   1        PWM_IMDEPENDENT_MODE;
 226   1        PWM_CLOCK_DIV_8;
 227   1        PWMPH = 0x07;
C51 COMPILER V9.53.0.0   GPIO                                                              02/08/2018 14:56:39 PAGE 5   

 228   1        PWMPL = 0xCF;
 229   1        
 230   1        LED_R(0);
 231   1        LED_G(0);
 232   1        LED_B(0);
 233   1        set_PWMRUN;
 234   1      }
 235          //-----------------------------------------------------------------------------------
 236          
 237          int get_adc(void)
 238          {
 239   1        clr_ADCF;
 240   1        set_ADCS;                 // ADC start trig signal
 241   1        while(ADCF == 0);
 242   1          return (int)(ADCRH<<2) + (int)((ADCRL&0x0f)>>2);//(((int)ADCRH)<<4+ADCRL&0x0f);
 243   1      }
 244          
 245          int Head_Music_Play=0;
 246          int Body_Music_Play=0;
 247          void main (void) 
 248          {
 249   1        int music_num=1;
 250   1        int play_state=-1;
 251   1        
 252   1        //set_PD;                 //powerdown directly 131.5uA
 253   1        Set_All_GPIO_Quasi_Mode;          // Define in Function_define.h
 254   1        DEBUG_LED=0;
 255   1        P01_PushPull_Mode;
 256   1        AUDIO_CTRL=1;
 257   1        Delay_1ms(300);               //Delay 300ms in case download problem
 258   1        InitialUART0_Timer1(9600);
 259   1        Send_Data_To_UART0(0xaa);
 260   1        Send_Data_To_UART0(0xaa);
 261   1        set_CLOEN; 
 262   1        audio_power_on();
 263   1      
 264   1      /*-------------------------------Init Timer---------------------------------------------*/
 265   1      #if 1
 266   1        TIMER0_MODE0_ENABLE;                        //Timer 0 and Timer 1 mode configuration
 267   1        clr_T0M;
 268   1          TMOD |= 0x01;                               //Timer0 is 16-bit mode
 269   1          TL0 = LOBYTE(TIMER_DIV12_VALUE_40ms);     //Find  define in "Function_define.h" "TIMER VALUE"
 270   1          TH0 = HIBYTE(TIMER_DIV12_VALUE_40ms);
 271   1        set_ET0;                                    //enable Timer0 interrupt
 272   1        set_EA;                                     //enable interrupts
 273   1        set_TR0;                                    //Timer0 run
 274   1      #endif
 275   1      
 276   1      /*-------------------------------Init Interrupts---------------------------------------------*/
 277   1      #if 1
 278   1        //Switch detect
 279   1        P17_Input_Mode;
 280   1        set_P0S_7;
 281   1        Enable_BIT7_FallEdge_Trig;
 282   1        button_trig_state=LOW;
 283   1        
 284   1        //USB detect
 285   1        P13_Input_Mode;
 286   1        set_P0S_3;
 287   1        Enable_BIT3_RasingEdge_Trig;
 288   1        charge_trig_state=HIGH;
 289   1        
C51 COMPILER V9.53.0.0   GPIO                                                              02/08/2018 14:56:39 PAGE 6   

 290   1        //audio BUSY pin
 291   1        P12_Input_Mode;
 292   1        set_P0S_2;
 293   1        Enable_BIT2_FallEdge_Trig;
 294   1        play_trig_state=LOW;
 295   1      
 296   1        Enable_INT_Port1;
 297   1        set_EPI;              // Enable pin interrupt
 298   1        set_EX0;
 299   1        set_EA;               // global enable bit
 300   1      
 301   1      #endif
 302   1      /*---------------------------------Main function-----------------------------------------------*/
 303   1        init_LED();
 304   1        Specify_Volume(SYS_VOLUME);
 305   1        while(1){
 306   2          //set_PD;         //powerdown here can be 145.8uA
 307   2          if(Button_state==1 && Charge_state==OFF){
 308   3            Button_state=-1;
 309   3            Body_Music_Play=0;
 310   3            if(Power_state==OFF){
 311   4              audio_power_on();
 312   4              Specify_Volume(SYS_VOLUME);
 313   4            }
 314   3            Play_head_music();
 315   3          }
 316   2          if(Button_state==0 && Charge_state==OFF){
 317   3            Button_state=-1;
 318   3            Body_Music_Play=1;
 319   3          }
 320   2          if(Play_state==STOP && Body_Music_Play==1){
 321   3            Body_Music_Play=0;
 322   3            if(Power_state==ON){
 323   4              Play_body_music();
 324   4            }
 325   3          }
 326   2          if(Play_state==PLAYING){
 327   3            int i=0;
 328   3            int red=0, green=0, blue=0;
 329   3            set_PWMRUN;
 330   3            ADC_Finish();
 331   3            FFT();
 332   3      #if 0
                      for(i=0; i<16; i++){
                        Send_Data_To_UART0(LED_TAB[i]);
                      }
                    Send_Data_To_UART0('\n');
              #endif
 338   3            red=LED_TAB[1]+LED_TAB[2]+LED_TAB[3]+LED_TAB[4]+LED_TAB[5];
 339   3            green=LED_TAB[6]+LED_TAB[7]+LED_TAB[8]+LED_TAB[9]+LED_TAB[10];
 340   3            blue=LED_TAB[11]+LED_TAB[12]+LED_TAB[13]+LED_TAB[14]+LED_TAB[15];
 341   3            red=red*3;
 342   3            green=green*3;
 343   3            green=green*3;
 344   3            LED_R(red);
 345   3            LED_G(green);
 346   3            LED_B(blue);
 347   3              wake_time = 0;
 348   3            //set_IDL;
 349   3          }
 350   2          if(Play_state==PLAYING && Charge_state==ON){
 351   3            Stop_music();
C51 COMPILER V9.53.0.0   GPIO                                                              02/08/2018 14:56:39 PAGE 7   

 352   3          }
 353   2          if(Play_state==STOP){
 354   3            LED_R(0);
 355   3            LED_G(0);
 356   3            LED_B(0);
 357   3            set_IDL;
 358   3          }
 359   2          if(Reset_system==1){
 360   3            Delay_1ms(300);       //Add delay 300ms, in case USB connection problem.
 361   3            if(Reset_system==1){
 362   4              Reset_system=-1;
 363   4              SW_Reset();
*** WARNING C206 IN LINE 363 OF Code\GPIO.C: 'SW_Reset': missing function-prototype
 364   4            }
 365   3          }
 366   2          if(Reset_audio==1){
 367   3            Delay_1ms(100);       //Add delay 300ms, in case USB connection problem.
 368   3            if(Reset_audio==1){
 369   4              Reset_audio=-1;
 370   4              reboot_audio();     //reboot audio, to get the charger type.
 371   4            }
 372   3          }
 373   2          if(Play_state==STOP && Charge_state==OFF && wake_time > SECOND*30)
 374   2          {
 375   3            Send_Data_To_UART0(0xaa);
 376   3            audio_power_off(1);
 377   3          }
 378   2          if(Charge_state==ON && charge_type==TYPE_USB && wake_time > MINIT*20) //when USB state, power off audio 
             -after 20min, to make sure device can charge to full.
 379   2          {
 380   3            Send_Data_To_UART0(0xbb);
 381   3            audio_power_off(1);
 382   3          }
 383   2          if(Charge_state==ON && charge_type!=TYPE_USB && wake_time > MINIT)  //when AC state, power off audio afte
             -r 1min,power off audio, to make sure device can charge to full.
 384   2          {
 385   3            Send_Data_To_UART0(0xcc);
 386   3            audio_power_off(1);
 387   3          }
 388   2      
 389   2        }
 390   1      }
*** WARNING C290 IN LINE 130 OF Code\GPIO.C: missing return value
*** WARNING C290 IN LINE 142 OF Code\GPIO.C: missing return value
*** WARNING C290 IN LINE 191 OF Code\GPIO.C: missing return value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5308    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    656      70
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  5 WARNING(S),  0 ERROR(S)
